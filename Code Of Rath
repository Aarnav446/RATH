// IR Sensor
#define leftCenterSensor   A2
#define leftNearSensor     A1
#define leftFarSensor      A0
#define rightCenterSensor  A3
#define rightNearSensor    A4
#define rightFarSensor     A5

// IR Sensor readings
int leftCenterReading;
int leftNearReading;
int leftFarReading;
int rightCenterReading;
int rightNearReading;
int rightFarReading;

int leftNudge;
int replaystage;
int rightNudge;

// Enable Pins
#define enl 9   // LEFT
#define enr 10  // RIGHT

// Speed of motor
#define spd 150

#define leapTime 200

// Motors
#define leftMotor1  5
#define leftMotor2  2
#define rightMotor1 4
#define rightMotor2 3

// For storing path details
char path[30] = {};
int pathLength;
int readLength;

void setup() {
  pinMode(leftMotor1, OUTPUT);
  pinMode(leftMotor2, OUTPUT);
  pinMode(rightMotor1, OUTPUT);
  pinMode(rightMotor2, OUTPUT);
  pinMode(enl, OUTPUT);
  pinMode(enr, OUTPUT);
  Serial.begin(9600);
}

void loop() {
  readSensors();
  
  // if both far sensors are off the track, and at least one center sensor detects the line
  if (leftFarReading < 200 && rightFarReading < 200 && (leftCenterReading > 200 || rightCenterReading > 200)) {
    straight();  // Move straight
  } else {
    leftHandWall();  // Otherwise, handle wall following logic
  }
}

void readSensors() {
  leftCenterReading  = analogRead(leftCenterSensor);
  leftNearReading    = analogRead(leftNearSensor);
  leftFarReading     = analogRead(leftFarSensor);
  rightCenterReading = analogRead(rightCenterSensor);
  rightNearReading   = analogRead(rightNearSensor);
  rightFarReading    = analogRead(rightFarSensor);
}

void straight() {
  digitalWrite(leftMotor1, HIGH);
  digitalWrite(leftMotor2, LOW);
  digitalWrite(rightMotor1, HIGH);
  digitalWrite(rightMotor2, LOW);
  delay(leapTime);
}

void leftHandWall() {
  // If both far sensors detect the line, we may be at the end of the maze or a 3-way intersection
  if (leftFarReading < 200 && rightFarReading < 200) {
    digitalWrite(leftMotor1, HIGH);
    digitalWrite(leftMotor2, LOW);
    digitalWrite(rightMotor1, HIGH);
    digitalWrite(rightMotor2, LOW);
    delay(leapTime);
    readSensors();

    if (leftFarReading < 200 || rightFarReading < 200) { // End of maze or completed area
      done();
    } else { // Else, turn left
      turnLeft();
    }
  }

  // If left far sensor sees the line, it’s a possible left turn
  if (leftFarReading < 200) {
    digitalWrite(leftMotor1, HIGH);
    digitalWrite(leftMotor2, LOW);
    digitalWrite(rightMotor1, HIGH);
    digitalWrite(rightMotor2, LOW);
    delay(leapTime);
    readSensors();
    if (leftFarReading > 200 && rightFarReading > 200) { // Check to ensure maze isn’t done
      turnLeft();
    } else {
      done();
    }
  }

  // If right far sensor detects the line, it’s a possible right turn
  if (rightFarReading < 200) {
    digitalWrite(leftMotor1, HIGH);
    digitalWrite(leftMotor2, LOW);
    digitalWrite(rightMotor1, HIGH);
    digitalWrite(rightMotor2, LOW);
    delay(10);  // Changed from 30 to 10
    readSensors();

    if (leftFarReading < 200) { // Left turn is also possible
      delay(leapTime - 30);
      readSensors();

      if (rightFarReading < 200 && leftFarReading < 200) { // End of maze
        done();
      } else { // Make the left turn
        turnLeft();
        return;
      }
    }
    delay(leapTime - 30);
    readSensors();
    if (leftFarReading > 200 && leftCenterReading > 200 && rightCenterReading > 200 && rightFarReading > 200) {
      turnRight();
      return;
    }
    path[pathLength] = 'S';
    pathLength++;
    if (path[pathLength - 2] == 'B') {
      shortPath();
    }
    straight();
  }
  
  readSensors();
  
  // If no sensors detect the line, turn around
  if (leftFarReading > 200 && leftCenterReading > 200 && rightCenterReading > 200 && rightFarReading > 200 
      && leftNearReading > 200 && rightNearReading > 200) {
    turnAround();
  }
}

void shortPath() {
  int shortDone = 0;

  // Handle short path logic to eliminate loops
  if (path[pathLength - 3] == 'L' && path[pathLength - 1] == 'R') {
    pathLength -= 3;
    path[pathLength] = 'B';
    shortDone = 1;
  }
  if (path[pathLength - 3] == 'L' && path[pathLength - 1] == 'S' && shortDone == 0) {
    pathLength -= 3;
    path[pathLength] = 'R';
    shortDone = 1;
  }
  if (path[pathLength - 3] == 'R' && path[pathLength - 1] == 'L' && shortDone == 0) {
    pathLength -= 3;
    path[pathLength] = 'B';
    shortDone = 1;
  }
  if (path[pathLength - 3] == 'S' && path[pathLength - 1] == 'L' && shortDone == 0) {
    pathLength -= 3;
    path[pathLength] = 'R';
    shortDone = 1;
  }
  if (path[pathLength - 3] == 'S' && path[pathLength - 1] == 'S' && shortDone == 0) {
    pathLength -= 3;
    path[pathLength] = 'B';
    shortDone = 1;
  }
  if (path[pathLength - 3] == 'L' && path[pathLength - 1] == 'L' && shortDone == 0) {
    pathLength -= 3;
    path[pathLength] = 'S';
    shortDone = 1;
  }
  
  path[pathLength + 1] = 'D';
  path[pathLength + 2] = 'D';
  pathLength++;
}

void turnLeft() {
  // Function for turning left
  digitalWrite(leftMotor1, LOW);
  digitalWrite(leftMotor2, HIGH);
  digitalWrite(rightMotor1, HIGH);
  digitalWrite(rightMotor2, LOW);
  delay(leapTime);
}

void turnRight() {
  // Function for turning right
  digitalWrite(leftMotor1, HIGH);
  digitalWrite(leftMotor2, LOW);
  digitalWrite(rightMotor1, LOW);
  digitalWrite(rightMotor2, HIGH);
  delay(leapTime);
}

void turnAround() {
  // Function for turning around (180 degrees)
  digitalWrite(leftMotor1, HIGH);
  digitalWrite(leftMotor2, LOW);
  digitalWrite(rightMotor1, HIGH);
  digitalWrite(rightMotor2, LOW);
  delay(2 * leapTime);  // Make a larger delay for a 180-degree turn
}

void done() {
  // End of maze logic
  digitalWrite(leftMotor1, LOW);
  digitalWrite(leftMotor2, LOW);
  digitalWrite(rightMotor1, LOW);
  digitalWrite(rightMotor2, LOW);
  Serial.println("Maze completed!");
  while (1);  // Stop the robot here
}
